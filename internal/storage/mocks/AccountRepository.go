// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "money-transfer/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

// GetAccount provides a mock function with given fields: ctx, id
func (_m *AccountRepository) GetAccount(ctx context.Context, id string) (*models.Account, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Account); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitializeTestData provides a mock function with given fields: ctx
func (_m *AccountRepository) InitializeTestData(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InitializeTestData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransferWithinTx provides a mock function with given fields: ctx, fromID, toID, amount
func (_m *AccountRepository) TransferWithinTx(ctx context.Context, fromID string, toID string, amount float64) error {
	ret := _m.Called(ctx, fromID, toID, amount)

	if len(ret) == 0 {
		panic("no return value specified for TransferWithinTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) error); ok {
		r0 = rf(ctx, fromID, toID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
