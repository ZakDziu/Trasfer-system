// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"

	storage "money-transfer/internal/storage"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Account provides a mock function with no fields
func (_m *Store) Account() storage.AccountRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Account")
	}

	var r0 storage.AccountRepository
	if rf, ok := ret.Get(0).(func() storage.AccountRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.AccountRepository)
		}
	}

	return r0
}

// DB provides a mock function with no fields
func (_m *Store) DB() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DB")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
